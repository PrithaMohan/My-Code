/********************************************************************************************************************
Consonants to Vowels
The program must accept a string S as the input. The program must replace every consonant by the next nearest vowel.
If there is no vowel after a consonant then it must be removed from the string. 
If there is no vowel in S, then print -1 as the output.
Boundary Condition(s):
1 <= Length of S <= 100
Input Format:
The first line contains the values of S. 
Output Format: 
The first line contains the string as per the condition or -1.
Example Input/Output 1:
Input: 
request
Output:
eeuue
Explanation:
In the string request, the first vowel after r is e. So the string becomes eequest In the string eequest, the first vowel after q is u.
So the string becomes eeuuest There is no vowel after s and t so they are removed. The string becomes eeuue Hence the output is eeuue
Example Input/Output 3:
Input:
cry
Output:
-1
********************************************************************************************************************/
#include<stdio.h>
#include <stdlib.h>
int is_vow(char str)
{
        switch(str)
        {
            case 'a':
            case 'A':
            case 'e':
            case 'E':
            case 'i':
            case 'I':
            case 'o':
            case 'O':
            case 'u':
            case 'U':return 1;
            
        }
        return 0;
}
int is_there_vowel(char *str)
{
    int ind = 0;
    while(str[ind] != '\0')
    {
        if(is_vow(str[ind]))
        return 1;
        ++ind;
    }return 0;
}
int main()
{
    int ind1 = 0,ind2 = 1;
    char str[100];
    scanf("%s",str);
    if(!is_there_vowel(str))
        printf("-1");
    else
    {
        while(ind1 < ind2 && str[ind2] != '\0')
        {
            while(str[ind2] != '\0' && !is_vow(str[ind2]))
            {
                ++ind2;
            }if(str[ind2] != '\0')
            while(ind1 < ind2)
            {
                if(!is_vow(str[ind1]))
                {
                    str[ind1] = str[ind2];
                }++ind1;
            }++ind2;
        }
        str[ind1+1] = '\0';
        printf("%s",str);
    }
    
    

}
