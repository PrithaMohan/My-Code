/******************************************************************************************
N characters Most Consonants 
The program must accept a string S and an integer N as the input.
The program must print the first N characters of S if it contains more consonants than the number of consonants
in the last N characters of S as the output. Else the program must print the last N characters of S as the output.
If both the first N and last N characters contain the same number of consonants then the program must print the entire string without
any modifications as the output.
Boundary Condition(s): 
2 <= Length of string <= 100 1 <= N <= Length of string
Input Format:
The first line contains S and N separated by a space. 
Output Format: 
The first line contains the string as per the given condition. 
Example Input/Output 1:
Input:
tamarind 
4
Output:
rind 
Explanation:
There are 2 consonants in the first 4 characters.
There are 3 consonants in the last 4 characters. Hence the last 4 characters are printed.
Example Input/Output 2:
Input:
basic
2
Output:
basic

******************************************************************************************8/
#include<stdio.h>
#include <stdlib.h>
int con(char c)
{
    switch(c)
    {
        case 'a':
        case 'e':
        case 'i':
        case 'o':
        case 'u':return 0;
    }
    return 1;
}
int main()
{
char s[100];
int N,c1=0,c2=0;
scanf("%s %d",s,&N);
int start = 0,end=strlen(s)-1;
while(start<N)
{
    if(con(s[start]))
    ++c1;
    if(con(s[end]))
    ++c2;
    ++start;
    --end;
}start=0;
if(c1>c2)
{
    while(start<N)
    {
        printf("%c",s[start]);
        ++start;
    }
}
else if(c1<c2)
{++end;
    while(s[end]!='\0')
    {
       printf("%c",s[end]);
       ++end;
    }
}
else if(c1==c2)
{
    start=0;
    while(s[start]!='\0')
    {
        printf("%c",s[start]);
        ++start;
    }
}
}


