/*********************************************************************************************************

Consonants - Palindrome
The program must accept a string S as the input.
The program must remove all the vowels from the string S. Finally, the program must print YES if the modified string S
is a palindrome. Else the program must print NO as the output. If there is no consonant in the modified string S then the program
must print -1 as the output. 
Note:
All the alphabets in S are only in lower case.
Boundary Condition(s):
1 <= Length of S <= 100 
Input Format:
The first line contains the string S. 
Output Format:
The first line contains YES or NO or -1 as per given conditions. 
Example Input/Output 1:
Input:
abcdefdcb 
Output:
YES
Explanation:
The vowels in the string "abcdefdcb" are removed. Now the string becomes "bcdfdcb". Here the string "bcdfdcb" is a palindrome.
Hence the output is YES
Example Input/Output 2:
Input:
monkeyeknod 
Output:
NO
Example Input/Output 3:
Input:
aeeeei
Output:
-1

*********************************************************************************************************/

#include<stdio.h>
#include <stdlib.h>
int isvow(char c)
{
    switch(c)
    {
        case 'a':
        case 'e':
        case 'i':
        case 'o':
        case 'u':return 1;
    }return 0;
}
int ispal(char *s)
{
    int l= strlen(s),e=l-1;
    for(int i=0;i<l/2;i++)
    {
        if(s[i] != s[e--])
        return 0;
    }
    return 1;
}
int main()
{
char s1[100],s2[100];
s2[0]='\0';
scanf("%[^\n]s",s1);
int itr=0,c=0;
while(s1[itr] != '\0')
{
    if(!isvow(s1[itr]))
    s2[c++] = s1[itr];
    ++itr;
}
//printf("%s",s2);
if(s2[0]=='\0')
printf("-1");
else if(ispal(s2))
printf("YES");
else
printf("NO");


}
