/*******************************************************************************************************
Find the Base of N
The program must accept a string N as the input. The program must print the output based on the following conditions. 
- If N is a valid binary representation then print "Binary" as the output.
- Else if N is a valid octal representation then print "Octal" as the output.
- Else if N is a valid decimal representation then print "Decimal" as the output.
- Else if N is a valid hexadecimal representation then print "Hexadecimal" as the output.
- Else the program must print "Invalid" as the output.
Note:
The alphabets in N are only in upper case.
Boundary Condition(s):
1 <= Length of N <= 100
Input Format:
The first line contains the string N. 
Output Format:
The first line contains the string value based on the conditions mentioned above. 
Example Input/Output 1:
Input: 110
Output 
Binary
Explanation:
110 is the valid binary, octal, decimal and hexadecimal representations.
But in the mentioned order, Binary comes first. Hence the output is Binary
Example Input/Output 2:
Input:
62067
Output:
Octal
Explanation:
62067 is the valid octal, decimal and hexadecimal representations. But in the mentioned order, Octal comes first.
Hence the output is Octal 
Example Input/Output 3:
Input:
10G
Output:
Invalid
*******************************************************************************************************/

import java.util.*;
public class Hello {
public static int binary(String s)
{
   s =  s.replaceAll("1","");
   s =  s.replaceAll("0","");
    if(s.length() == 0)
    return 1;
    return 0;
}
public static String octal_or_decimal(String s)
{
    int max = 0;
    for(int ind = 0; ind < s.length(); ind++)
    {
        int N = s.charAt(ind)-'0';
        if( (N>=0 && N<=9) && N>max)
            max = N;
    }
    if(max>=0 && max<8)
    return "oct";
    if(max>=0 && max<=9)
    return "dec";
    return null;
}
public static int hexadecimal(String s)
{
    boolean alpha = s.matches(".*[A-Z]+.*");
    boolean notalpha = s.matches(".*[G-Z]+.*");
    if(alpha && !notalpha)
    return 1;
    return 0;
}
    public static void main(String[] args) {
		//Your Code Here
		Scanner ob = new Scanner(System.in);
		String s = ob.next();
		String t;
		if(binary(s) == 1)
		System.out.println("Binary");
		else if(hexadecimal(s) == 1)
		System.out.println("Hexadecimal");
		else 
		{boolean alpha = s.matches(".*[g-zG-Z]+.*");
		if(!alpha)
		    {
		        t = octal_or_decimal(s);
		    if(t.equals("oct"))
		        System.out.println("Octal");
		    else if(t.equals("dec"))
		        System.out.println("Decimal");
		    }
		    else
		        System.out.println("Invalid");
		}
	}
}
