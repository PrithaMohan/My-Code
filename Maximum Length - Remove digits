/*************************************************************************************************
Maximum Length - Remove Digits
The program must accept N string values as the input. 
The program must remove all the digits in each string value.
Then the program must print the string having the maximum length as the output. 
If more than one string have the maximum length then the program must print the first occurring string as the output.
If all the characters in each string are digits then the program must print -1 as the output.
Boundary Condition(s):
1 <= N <= 1000 
1 <= Length of each string <= 100
Input Format: 
The first line contains the value of N.
The next N lines contain a string value on each line.
Output Format:
The first line contains either the string having the maximum length or -1 based on the given conditions.
Example Input/Output 1:
Input:
4
hello123
w1o2r3l4d5
5-3=2
KQJ10TO2A 
Output:
KQJTOA
Explanation:
After removing all the digits in each string value, the string values becomes
hello
world
-=
KQJTOA
Here the string "KQJTOA" is having the maximum length as 6. So it is printed.
Example Input/Output 2:
Input:
5
48224
9375880
2624542
7991267
641941
Output:
-1
*************************************************************************************************/

#include<stdio.h>
#include <stdlib.h>
struct st{
    char s1[100],s2[100];
    int l;
}s[1000];
void form(char *ss,int ind)
{int i=0,c=0;
    while(ss[i] != '\0')
    {
        if((ss[i]-'0')>=0 && (ss[i]-'0')<=9  )
       {++i; 
           continue;
       }
        s[ind].s2[c++] = ss[i];
        ++i;
    }
    s[ind].l = strlen(s[ind].s2);
}
int main()
{int n;
scanf("%d",&n);
for(int i=0;i<n;i++)
{
    scanf("%s",s[i].s1);
    form(s[i].s1,i);
}int ind,m=0;
for(int i=0;i<n;i++)
{
    if(s[i].l > m)
    {
        m = s[i].l;
        ind = i;
    }
}

if(m == 0)
printf("-1");
else
printf("%s",s[ind].s2);

}
